<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Psyked</title><description>James' Web Development Blog</description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>Psyked</title><link>http://localhost:2368/</link></image><generator>Ghost 1.22</generator><lastBuildDate>Fri, 08 Jun 2018 12:57:17 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>[The importance of] Psychological Safety in a team</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Talk #2 from the &lt;a href="https://www.meetup.com/Agile-Peterborough/"&gt;Agile Peterborough Meetup&lt;/a&gt;, 23rd January 2018&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Swearing, Nudity and other Vulnerable positions&amp;quot;&lt;/strong&gt; by John Le Drew, &lt;a href="https://twitter.com/antz29"&gt;@antz29&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.agilepath.fm"&gt;www.agilepath.fm&lt;/a&gt; / &lt;a href="http://www.wisenoodles.com"&gt;www.wisenoodles.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="safety"&gt;Safety&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Safety&lt;/em&gt; is a difficult concept to understand without the correct language to express it properly. A lot of teams don't&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/the-importance-of-psychological-safety-in-a-team/</link><guid isPermaLink="false">5a6a5cd04941d01331611cd3</guid><category>Agile on Tap</category><dc:creator>James Ford</dc:creator><pubDate>Fri, 08 Jun 2018 12:42:00 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1483860714521-89abcb02604b?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ&amp;s=e5431bc23f74b484b6abb0fc74429f7a" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="https://images.unsplash.com/photo-1483860714521-89abcb02604b?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ&amp;s=e5431bc23f74b484b6abb0fc74429f7a" alt="[The importance of] Psychological Safety in a team"&gt;&lt;p&gt;Talk #2 from the &lt;a href="https://www.meetup.com/Agile-Peterborough/"&gt;Agile Peterborough Meetup&lt;/a&gt;, 23rd January 2018&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Swearing, Nudity and other Vulnerable positions&amp;quot;&lt;/strong&gt; by John Le Drew, &lt;a href="https://twitter.com/antz29"&gt;@antz29&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.agilepath.fm"&gt;www.agilepath.fm&lt;/a&gt; / &lt;a href="http://www.wisenoodles.com"&gt;www.wisenoodles.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="safety"&gt;Safety&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Safety&lt;/em&gt; is a difficult concept to understand without the correct language to express it properly. A lot of teams don't have it, and those teams don't realise that it's missing.&lt;/p&gt;
&lt;p&gt;Google did a study they called &amp;quot;Project Aristotle&amp;quot;, which deduced that team effectiveness is more about how people work together than it is the individuals who are in the team.&lt;/p&gt;
&lt;p&gt;The key things that an effective, motivated team has are:&lt;/p&gt;
&lt;h3 id="impact"&gt;Impact&lt;/h3&gt;
&lt;p&gt;The belief that your work matters and creates change. Regular progress on meaningful work leads to motivation.&lt;/p&gt;
&lt;h3 id="meaning"&gt;Meaning&lt;/h3&gt;
&lt;p&gt;The work is personally important to team members. Meaningful work is not just charity work and ethical stuff. Meaning can come from smaller things, like supporting and mentoring others, improving quality, or anything else that individuals value.&lt;/p&gt;
&lt;h3 id="structureandclarity"&gt;Structure and Clarity&lt;/h3&gt;
&lt;p&gt;Clear roles, plans and goals, which are understood universally by the team.&lt;/p&gt;
&lt;h3 id="dependability"&gt;Dependability&lt;/h3&gt;
&lt;p&gt;The team can be relied upon to gets things done on time and meet the expectations of them. Most importantly, this is an internal attribute - the team members can rely on each other to do what they commit to doing. Dependability is key to forming trust.&lt;/p&gt;
&lt;h2 id="psychologicalsafety"&gt;Psychological Safety&lt;/h2&gt;
&lt;p&gt;Team members feel safe to take risks and be vulnerable in front of one another, without the fear of punishment, reprisals or humiliation. It's not a physical thing, it's about perceptions. We as a human do not want to do anything which will reflect on ourselves and make others think negatively of our competence, awareness or positivity.&lt;/p&gt;
&lt;p&gt;Safety means having no fear of punishment or humiliation for speaking up, sharing ideas, questions, concerns or mistakes with the team. You are 'safe' if you can speak your truth without fear and the perception of you as the individual cannot be damaged by what you say.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Without these attributes, a team cannot be engaged with their work. Work is stressful, life is stressful, you can't avoid that. But engagement with work makes you more resilient to that stress. So, in conclusion - Safety underpins engagement. Engagement helps you cope with stress.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>OpenFaaS: Like AWS Lambda, but Open Source and built on top of Docker</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;These are my notes from talk #1 from the &lt;a href="https://www.meetup.com/Agile-Peterborough/"&gt;Agile Peterborough Meetup&lt;/a&gt; on the 23rd January 2018.&lt;/p&gt;
&lt;p&gt;Delivered by &lt;a href="https://twitter.com/alexellisuk"&gt;Alex Ellis,&lt;/a&gt; founder and lead dev of &lt;a href="https://twitter.com/openfaas"&gt;OpenFaaS,&lt;/a&gt; and Docker Captain.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2018/03/evolution.png" alt="evolution"&gt;&lt;/p&gt;
&lt;p&gt;Functions are the evolution of microservices. They do one thing, really well. They are smaller and easier to deploy to&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/openfaas-like-lamba-but-open/</link><guid isPermaLink="false">5a6a5e4b4941d01331611cd4</guid><category>Agile on Tap</category><category>OpenFaaS</category><category>Docker</category><dc:creator>James Ford</dc:creator><pubDate>Mon, 26 Mar 2018 21:55:23 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1454991727061-be514eae86f7?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ&amp;s=d82357ad2d2291c39a5078cdc892d4fb" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="https://images.unsplash.com/photo-1454991727061-be514eae86f7?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ&amp;s=d82357ad2d2291c39a5078cdc892d4fb" alt="OpenFaaS: Like AWS Lambda, but Open Source and built on top of Docker"&gt;&lt;p&gt;These are my notes from talk #1 from the &lt;a href="https://www.meetup.com/Agile-Peterborough/"&gt;Agile Peterborough Meetup&lt;/a&gt; on the 23rd January 2018.&lt;/p&gt;
&lt;p&gt;Delivered by &lt;a href="https://twitter.com/alexellisuk"&gt;Alex Ellis,&lt;/a&gt; founder and lead dev of &lt;a href="https://twitter.com/openfaas"&gt;OpenFaaS,&lt;/a&gt; and Docker Captain.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2018/03/evolution.png" alt="OpenFaaS: Like AWS Lambda, but Open Source and built on top of Docker"&gt;&lt;/p&gt;
&lt;p&gt;Functions are the evolution of microservices. They do one thing, really well. They are smaller and easier to deploy to production. AWS Lambda is a good example to think of. They are the tools that power things like Alexa services.&lt;/p&gt;
&lt;p&gt;Lambda has limitations though - it only supports a few languages, and concepts like CI/CD go out of the window with Lambda, because it just doesn't work that way.&lt;/p&gt;
&lt;p&gt;OpenFaaS uses Docker and exists in the same market niche as Lambda. OpenFaaS originally came out of the DockerCon Cool Hacks hackathon. The hackathon was all about taking docker beyond what it was originally designed to do. It won the Hackathon, got presented at DockerCon, and it's gone from there. It now has a lot of contributers, 9k GitHub stars, and Alex spends a decent amount of time presenting it to different audiences.&lt;/p&gt;
&lt;p&gt;What makes OpenFaaS different is from Lambda is that it can run any binary as a service on any infrastructure. It's not limited to Amazon and it can go on any cloud system or any bare metal system. It sits as an interface between your normal binary and provides an API, UI and CLI for that binary, making it possible to monitor, scale, test and configure your function easily, and it provides a lot of developer-first tooling to help you scaffold your service.&lt;/p&gt;
&lt;p&gt;In a stunning show of confidence, Alex did some live demos, and they worked.&lt;/p&gt;
&lt;p&gt;For the first demo, he used Alexa to check his work holiday time and then book a day off - a task which behind the scenes involves a 20-step process through a website to complete. A browser automation script wrapped within OpenFaaS was able to achieve this instead.&lt;/p&gt;
&lt;p&gt;For the second demo, he used a machine learning algorithm to colourise a black and white picture. This involved accessing the OpenFaaS function through its web interface and using that to upload an image grabbed from Google. The function then responded (after 4.5 seconds) with a colourised version.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/openfaas/faas"&gt;https://github.com/openfaas/faas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All in all, OpenFaaS is pretty cool.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>3 hour hacks</title><description>&lt;div class="kg-card-markdown"&gt;&lt;h2 id="heresmynextbigidea"&gt;Here’s my next big idea.&lt;/h2&gt;
&lt;p&gt;Most products seem to be an idea that you can knock up a prototype for in three hours, if you know what you’re doing.&lt;/p&gt;
&lt;p&gt;Even if you &lt;em&gt;don’t&lt;/em&gt; know what you’re doing you can learn an awful lot about a subject&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/3-hour-hacks/</link><guid isPermaLink="false">5af5fca21e20320a52558640</guid><category>Hackathon</category><dc:creator>James Ford</dc:creator><pubDate>Sun, 11 Mar 2018 09:15:00 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1506929562872-bb421503ef21?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ&amp;s=0288e8bf8e93bd84d30938f5165ce984" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;h2 id="heresmynextbigidea"&gt;Here’s my next big idea.&lt;/h2&gt;
&lt;img src="https://images.unsplash.com/photo-1506929562872-bb421503ef21?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;ixid=eyJhcHBfaWQiOjExNzczfQ&amp;s=0288e8bf8e93bd84d30938f5165ce984" alt="3 hour hacks"&gt;&lt;p&gt;Most products seem to be an idea that you can knock up a prototype for in three hours, if you know what you’re doing.&lt;/p&gt;
&lt;p&gt;Even if you &lt;em&gt;don’t&lt;/em&gt; know what you’re doing you can learn an awful lot about a subject in that space of time.&lt;/p&gt;
&lt;p&gt;My ‘big idea’ is to time-box my side projects into three-hour hacks. I’ll work on an idea for three hours, with a focus on producing something new and unique, and then stop; document, and evaluate progress and likelihood of eventual success.&lt;/p&gt;
&lt;p&gt;Essentially it’s a bit of mental re-framing, a release from the pressure of creating a perfect product. I can always continue with a prototype if I like where it’s heading, or I can shelve it for some indeterminate point in the future.&lt;/p&gt;
&lt;p&gt;I’m reminded of &lt;a href="https://news.ycombinator.com/item?id=8863"&gt;this comment&lt;/a&gt; from when Dropbox first came out;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“For a Linux user, you can already build such a system yourself quite trivially by getting an FTP account, mounting it locally with curlftpfs, and then using SVN or CVS on the mounted filesystem. From Windows or Mac, this FTP account could be accessed through built-in software.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sounds simple, doesn’t it? The key to success with a product is not whether it’s already achievable, its the other 99% – time and effort, dedication, marketing, infrastructure and a paying audience, to name a few.&lt;/p&gt;
&lt;p&gt;My motivation with side projects is to create something that I want, and it would be a nice bonus to have others want it also. I enjoy learning as I go and I don’t have lots of time and money and effort to expend pushing these projects mainstream, and I’m okay with that. If I can crack the core of the tech in three hours that’s enough of a win for me.&lt;/p&gt;
&lt;p&gt;3 Hour Hacks, here we come.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>PokéProject: Adventures with LEGO® Bricks</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Using JavaScript and HTML5 canvas elements to convert images into 2 dimensional LEGO brick plans.&lt;/p&gt;
&lt;h3 id="part1fromimagespritetopixelart"&gt;Part 1: From image sprite to pixel art.&lt;/h3&gt;
&lt;p&gt;What’s the difference between the image sprites included in the original Game Boy games and Retro Pixel art? If you ask me, it’s just a&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/pokeproject-adventures-with-lego-r-bricks/</link><guid isPermaLink="false">59ac728187d02b43f8a8e808</guid><category>PokéProject</category><category>Lego</category><category>Nuxt</category><dc:creator>James Ford</dc:creator><pubDate>Thu, 05 Oct 2017 20:28:11 GMT</pubDate><media:content url="http://localhost:2368/content/images/2017/09/2017-06-19-18.25.59-1.jpg" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="http://localhost:2368/content/images/2017/09/2017-06-19-18.25.59-1.jpg" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;p&gt;Using JavaScript and HTML5 canvas elements to convert images into 2 dimensional LEGO brick plans.&lt;/p&gt;
&lt;h3 id="part1fromimagespritetopixelart"&gt;Part 1: From image sprite to pixel art.&lt;/h3&gt;
&lt;p&gt;What’s the difference between the image sprites included in the original Game Boy games and Retro Pixel art? If you ask me, it’s just a matter of scale — scale the images up, and suddenly it’s art.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/09/1-ahfgymTGsLrv5DvRElUX4A.png" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;br&gt;
&lt;em&gt;Art, for reference.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But simply printing this ‘pixel art’ out at a large size isn’t really impressive. After all, why bother? — you could just as easily go with a higher resolution version of the same image. You could print a version of the pixel art on something the size of a postage stamp, but just as easily print it on a sheet of paper, or on a large poster — there’s no constraints on standard printing, after all. What’s more visually impressive is mixing media. If you made your pixel art out of lego for example; well, that’s more interesting.&lt;/p&gt;
&lt;h3 id="fromthisideapokprojectlegoeditionwasborn"&gt;💡 From this idea, PokéProject: LEGO Edition was born.&lt;/h3&gt;
&lt;p&gt;LEGO bricks come in a variety of colours and with a fairly rigid set of dimensions. The smallest of these is the 1x1 brick, approximately 8mm square in size. If we could recreate a 32x32 pixel sprite that’d give us something just over 25cm square in size, and a 96x96 sprite would be just under 77cm square, which sounds like it could make some impressive pieces for wall art.&lt;/p&gt;
&lt;p&gt;So, how to make this a reality?&lt;/p&gt;
&lt;h3 id="datasourcesandharvesting"&gt;Data sources and harvesting&lt;/h3&gt;
&lt;p&gt;The first thing I needed to do was discover what LEGO bricks were available, and in what colours. Information for the available colours is readily available from &lt;a href="https://bricks.stackexchange.com/questions/75/how-many-different-colours-of-lego-bricks-are-there"&gt;a variety of sources,&lt;/a&gt; including RGB and Hex colour mappings, so it was easy enough to grab that data.&lt;/p&gt;
&lt;p&gt;To find out what bricks were actually available to purchase (given that a lot of bricks are not available to purchase individually and on demand) I had to visit the &lt;a href="https://shop.lego.com/en-GB/Pick-a-Brick"&gt;official LEGO Pick-A-Brick service,&lt;/a&gt; and essentially scrape the entirety of their search results to collate a data store of the available bricks for use in my calculations.&lt;/p&gt;
&lt;p&gt;I’ve made &lt;a href="https://github.com/psyked/LEGO-Bricks-Data"&gt;the results of my data harvesting efforts available on GitHub.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="palettemapping"&gt;Palette mapping&lt;/h3&gt;
&lt;p&gt;The original Game Boy Colour could support over 32,000 colours [&lt;a href="https://en.wikipedia.org/wiki/List_of_video_game_console_palettes#Game_Boy_Color"&gt;source&lt;/a&gt;], but LEGO Bricks only come in 40 or so [&lt;a href="http://lego.wikia.com/wiki/Colour_Palette"&gt;source&lt;/a&gt;]. The first challenge was to map those two palettes together and visualise the outcome.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/10/1-m0a0IO5JS4BninOLPPt97A.jpeg" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Directly mapping colours to colours wasn’t especially hard to implement — and the effects weren’t too bad either.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For the first pass at this colour mapping, I used what was essentially a &lt;a href="https://stackoverflow.com/a/13587077/377961"&gt;Euclidean distance&lt;/a&gt; calculation, treating the colour of each pixel in the source image as a number and finding the nearest match in the more limited lego colours palette.&lt;/p&gt;
&lt;h3 id="introducingperceptualcolourmatchingtheory"&gt;Introducing… perceptual Colour Matching theory&lt;/h3&gt;
&lt;p&gt;After a little testing, it emerged that the simple colour matches being used weren’t quite up to scratch. As an example, the lightest of colours — which were quite clearly a grey, green or blue — would be matched with the light pink colour, because that’s the closest match from a programmatic point of view, or important details would get lost when there’s not a lot of contrast.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/10/1-IHN_O3KWkc8rDCfBRVPSzg.png" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;br&gt;
&lt;em&gt;DeltaE colour matching on the left, Euclidean distance in the middle, source sprite on the right.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Fortunately lots of smart people have already figured this out and solved it several times over, and come up with standard formulas for calculating colour matches based on human perception. With the help of &lt;a href="https://stackoverflow.com/a/29247003/377961"&gt;StackOverflow&lt;/a&gt; and the &lt;a href="http://zschuessler.github.io/DeltaE/"&gt;DeltaE library&lt;/a&gt; I was able to make some great improvements in the colour matching, enabling a much more nuanced palette map.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/10/1-VEuetcvPBJ0MeubZVG8mpg.png" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;br&gt;
&lt;em&gt;DeltaE (the 1976 version) colour matching isn’t half bad.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are actually three versions of the DeltaE / LAB perceptual colour matching calculations, so with a little experimentation I was able to try them out until I found one that seemed to work well across the board.&lt;/p&gt;
&lt;h3 id="expandingthedataset"&gt;Expanding the data set&lt;/h3&gt;
&lt;p&gt;It was at this point in time I stumbled across an interesting piece of information — not all of the available LEGO bricks are actually available through Pick-A-Brick, but many of them &lt;em&gt;are&lt;/em&gt; available through the &lt;a href="https://www.lego.com/en-gb/service/replacementparts/sale"&gt;replacement parts service,&lt;/a&gt; providing you know the part id of the brick itself.&lt;/p&gt;
&lt;p&gt;This data set was a little more difficult to put together, but it’s essentially the same principle — scraping the official LEGO website and putting it into a JSON data set for my source code to use.&lt;/p&gt;
&lt;p&gt;The effect of this that it massively expands the available brick colours and dimensions, which in turn greatly improves the quality of the colour matching in our models.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/10/1-NRj28widDkpcI5InJLhXJA.png" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;br&gt;
&lt;em&gt;LEGO Brick colour matching, using the available bricks from the replacement parts service.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Finally happy with the outcome of mapping sprite pixel colours to LEGO brick colours, I decided to tackle the next challenge — making efficient use of LEGO bricks.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="makingoptimaluseoftheavailablebricks"&gt;Making optimal use of the available bricks.&lt;/h2&gt;
&lt;p&gt;By this point I’ve already mapped my colour palette of my source image to the available LEGO brick colours as described in my previous post, and now I want to move beyond simple colour trickery and onto making this idea a physical reality.&lt;/p&gt;
&lt;h3 id="optimalbrickcalculations"&gt;Optimal Brick calculations 💰&lt;/h3&gt;
&lt;p&gt;Looking into the feasibility of actually purchasing LEGO bricks to make these sprites, it turns out it’s quite expensive. The bricks themselves average around £0.05 each, which puts the cost for a 64x64 pixel image at £204.80, which is &lt;em&gt;extreme.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;However, there’s economies to be made. If you can use fewer larger bricks to produce the same image, the effective cost-per-pixel can drop significantly, to around £0.01 per pixel, which saves quite a significant amount of cash.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/10/1-PQTitbDaP87fIPGqTqcq8A.png" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;br&gt;
&lt;em&gt;Needless to say, I put a fair amount of effort into optimising expenditure.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="itsjustnotlego"&gt;It’s just not LEGO&lt;/h3&gt;
&lt;p&gt;In addition to the raw cost issue, it doesn’t really feel like a &lt;em&gt;real&lt;/em&gt; project if everything is made of 1x1 bricks. That’s the kind of boring thing that an old style dot-matrix printer would output, and it doesn’t feel all that creative.&lt;/p&gt;
&lt;p&gt;As it transpires, this is exactly what &lt;a href="http://nerdist.com/londons-lego-store-lets-you-buy-a-lego-mosaic-of-your-face/"&gt;a dedicated booth in the London LEGO shop&lt;/a&gt; does, but I still think it’s a cop-out and I can do better.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/10/1-L3Wr47nE4EHdH1ufkMhLcg.png" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/10/1-Eg0GiHYzAPp18q6v1ty4gg.png" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;br&gt;
&lt;em&gt;Who really wants to place 2,304 individual LEGO bricks, anyway?&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="insearchofpriorwork"&gt;In search of prior work.&lt;/h3&gt;
&lt;p&gt;I am a lazy programmer. I would much prefer to reuse someone else’s code than spend ages trying to figure it out myself, and to this end I Googled an endless variety of phrases looking for some kind of prior work around the optimal use of LEGO bricks in a two-dimensional plane, only to come up with absolutely nothing.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;did&lt;/em&gt; read some fascinating articles about such things as &lt;a href="https://d3plus.org/blog/behind-the-scenes/2014/07/08/largest-rect/"&gt;“An approximation algorithm for finding the largest rectangle inside a non-convex polygon”&lt;/a&gt; and a helluva lot of posts about everything from &lt;a href="https://en.wikipedia.org/wiki/Packing_problems"&gt;Bin Packing&lt;/a&gt; to &lt;a href="https://en.wikipedia.org/wiki/JPEG"&gt;JPEG compression&lt;/a&gt; on StackOverflow and Wikipedia, but ultimately there’s nothing that I could find which was appropriate.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It would appear that the optimal placement of an unlimited combination of arbitrarily-sized shapes within randomly shaped containers is not a high enough priority for the Computer Science community to have already solved effectively, much to my dismay.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was going to have to actually write the logic myself. 🤔&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="writingitmyself"&gt;Writing it myself.&lt;/h3&gt;
&lt;p&gt;Changing the colours of an image with JavaScript and HTML5 canvas elements is fairly easy — you pull in the image data as an Array, and you loop through it to get the R,G,B,A values for each pixel, which you can modify on the fly. Simple enough, but it lacks understanding of pixel coordinates and any sense of neighbouring pixels.&lt;/p&gt;
&lt;p&gt;My solution was to copy the image data into a new data structure which could easily reference its neighbours, and then for each pixel iterate through the available LEGO bricks — first to find the nearest colour match, and then to find the largest possible brick which could fit anchored at that point.&lt;/p&gt;
&lt;p&gt;Given a few passes the outcome is quite acceptable.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/10/1-khfGNAUXONDNEk-K-2-InQ.png" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;br&gt;
&lt;img src="http://localhost:2368/content/images/2017/10/1-Epnx95QXZr9PHyGC55A8oQ.png" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;br&gt;
&lt;em&gt;1x1 Bricks versus fairly-optimal various-sized Bricks&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It’s not the most optimal solution that might be technically possible, but it’s better than doing nothing at all to optimise the output.&lt;/p&gt;
&lt;p&gt;The biggest flaw is that it effectively scans through the image, top to bottom, left to right, to try and place bricks in an optimal fashion. Logically there could be better starting points for some shapes, ones which ultimately use less bricks to complete, but such an approach requires an infeasible number of passes to optimise, and that isn’t something I even want to try.&lt;/p&gt;
&lt;p&gt;So what’s next? Turns out there’s one more issue… a flaw in my logic.&lt;/p&gt;
&lt;h2 id="fromatheorytotherealworld"&gt;From a theory to the real world.&lt;/h2&gt;
&lt;p&gt;PokéProject: LEGO Edition started with colour mapping and developed into a calculation of optimal brick placement, and now I’m planning to put some money on the line and actually purchase some bricks and make this project into a tangible reality.&lt;/p&gt;
&lt;h3 id="realisticbrickcalculations"&gt;Realistic Brick calculations&lt;/h3&gt;
&lt;p&gt;So what’s next? Turns out there’s one more issue… a flaw in my logic.&lt;/p&gt;
&lt;p&gt;I had incorrectly assumed that all of the LEGO brick colours I’d grabbed from the internet were available as 1x1 bricks, and my ‘algorithm’ was based around that assumption. When I actually went to go and purchase those bricks… then I had a problem. And for some sprites, it was quite a problem.&lt;/p&gt;
&lt;p&gt;I’ve highlighted the problematic pixels in these images:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/10/1-rU7_XZWxTWMKPwGjNcPFJg.png" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;img src="http://localhost:2368/content/images/2017/10/1-_Ca4g3bvmBZYkOfLDjsUdw.png" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;img src="http://localhost:2368/content/images/2017/10/1-EwrUQTt0cCVQurrcolcHLA.png" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;br&gt;
&lt;em&gt;Highlighting the invalid / unavailable pixels in Magenta&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So, how best to deal with this issue?&lt;/p&gt;
&lt;p&gt;I’m loathe to simply remove those pixel colours from the pool — I like what I’ve achieved with the colour matching, and besides we only have 41 LEGO colours to play with as it is — don’t want to reduce that pool any further.&lt;/p&gt;
&lt;p&gt;My solution was to take those invalid bricks and find the next best fitting brick colour, repeatedly updating and looping through the image data and recalculating a next-best colour match for each pixel of the sprite until I had an acceptable match.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/10/1-JiEovDUZyrhOyrc8EJAH5g.png" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;img src="http://localhost:2368/content/images/2017/10/1-G-RzM3iSz_Ne5WWRLYMFrA.png" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;br&gt;
&lt;img src="http://localhost:2368/content/images/2017/10/1-EwrUQTt0cCVQurrcolcHLA-1.png" alt="PokéProject: Adventures with LEGO® Bricks"&gt;&lt;br&gt;
&lt;em&gt;The same sprites with next-best colour matching for invalid pixels&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Naturally, I went through quite a bit of trial and error to get to this stage — I tried selecting average pixel colours from neighbours, but that generally lost details, and I tried some complicated contrast-based comparisons to bleed similar colours into neighbouring invalid pixels, but that didn’t work well either. The simplest solution was the best — calculating a prioritised list of matching colours for each brick, and regressing through that list whenever the bricks we wanted didn’t actually exist.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="makingthejumpfromtheoreticaltophysical"&gt;Making the jump from theoretical to physical&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Finally,&lt;/em&gt; I have a working sprite-to-lego-brick conversion tool at my disposal. It calculates nearest matching bricks, does some optimisation, and spits out a sensible shopping list of items to purchase.&lt;/p&gt;
&lt;p&gt;Placing my order with the online LEGO store was (unfortunately) a fairly laborious process, because there doesn’t seem to be a nice bulk ordering system, but after about half an hour of manual entry I managed to get every individual brick in the basket. £37.69 paid to the LEGO store online and in the next 7–10 working days, the raw materials for my new creation should be with me.&lt;/p&gt;
&lt;p&gt;My LEGO Pokemon sprite tool is online, if you’d like to create a pattern and see the list of Bricks for it yourself: &lt;a href="https://www.pokeproject.co.uk/lego/"&gt;https://www.pokeproject.co.uk/lego/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="beyondpokmon"&gt;Beyond Pokémon 🔮&lt;/h3&gt;
&lt;p&gt;The exciting opportunity for this project now is that I have the start of a fairly generic image-to-LEGO pattern generator, which I might evolve into a proper standalone project over the next few months. After all, wouldn’t it be fun to turn more Retro games artwork into LEGO patterns? or webcam images, or profile photos or works of art? So many possibilities!&lt;/p&gt;
&lt;hr&gt;
&lt;/div&gt;</content:encoded></item><item><title>Link: “How terrible code gets written by perfectly sane people”</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Christian Maioli Mackeprang has written an article which you can find &lt;a href="https://chrismm.com/blog/how-terrible-code-gets-written-by-perfectly-sane-people/"&gt;here&lt;/a&gt; and &lt;a href="https://techbeacon.com/how-terrible-code-gets-written-perfectly-sane-people"&gt;here&lt;/a&gt; about at least some of the origins of bad code - almost all of which I would say is true.&lt;/p&gt;
&lt;p&gt;You can head over to the &lt;a href="https://techbeacon.com/how-terrible-code-gets-written-perfectly-sane-people"&gt;original article&lt;/a&gt; to read it in full, but the key&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/how-terrible-code-gets-written-by/</link><guid isPermaLink="false">59cfee0c88f41d89b33f89f8</guid><category>External links</category><category>Agile Software Development</category><dc:creator>James Ford</dc:creator><pubDate>Sat, 30 Sep 2017 19:43:32 GMT</pubDate><media:content url="http://localhost:2368/content/images/2017/09/Mister_Tricorder.jpg" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="http://localhost:2368/content/images/2017/09/Mister_Tricorder.jpg" alt="Link: “How terrible code gets written by perfectly sane people”"&gt;&lt;p&gt;Christian Maioli Mackeprang has written an article which you can find &lt;a href="https://chrismm.com/blog/how-terrible-code-gets-written-by-perfectly-sane-people/"&gt;here&lt;/a&gt; and &lt;a href="https://techbeacon.com/how-terrible-code-gets-written-perfectly-sane-people"&gt;here&lt;/a&gt; about at least some of the origins of bad code - almost all of which I would say is true.&lt;/p&gt;
&lt;p&gt;You can head over to the &lt;a href="https://techbeacon.com/how-terrible-code-gets-written-perfectly-sane-people"&gt;original article&lt;/a&gt; to read it in full, but the key points are...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Giving excessive importance to estimates&lt;/li&gt;
&lt;li&gt;Giving no importance to project knowledge&lt;/li&gt;
&lt;li&gt;Focusing on poor metrics such as “issues closed” or “commits per day”&lt;/li&gt;
&lt;li&gt;Assuming that good process fixes bad people&lt;/li&gt;
&lt;li&gt;Ignoring proven practices such as code reviews and unit testing&lt;/li&gt;
&lt;li&gt;Hiring developers with no “people” skills&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of these points - “Focusing on poor metrics” - is particularly interesting to me because it reflects on my &lt;a href="https://github.com/psyked/projectstats"&gt;ProjectStats&lt;/a&gt; sideproject, which does indeed count commits per day. Originally intended as an effort in encouraging good source control discipline, it has evolved to the point where developers are improperly encouraged to commit frequently, but not usefully.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>A collection of free, online, Front End Web Development books.</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;A remarkable number of excellent books about Front End Web Development are freely available online, if you know where to look. Here's a collection of those that I've discovered, and deigned to keep in my bookmarks.&lt;/p&gt;
&lt;h2 id="eloquentjavascript"&gt;Eloquent JavaScript:&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://eloquentjavascript.net/"&gt;http://eloquentjavascript.net/&lt;/a&gt;&lt;br&gt;
&lt;a href="http://eloquentjavascript.net/"&gt;&lt;img src="http://localhost:2368/content/images/2017/09/eloquent-javascript.png" alt="eloquent-javascript"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="learningjavascriptdesignpatterns"&gt;Learning JavaScript Design Patterns:&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/"&gt;https://addyosmani.com/resources/essentialjsdesignpatterns/&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/front-end-web-development-books/</link><guid isPermaLink="false">59c827ffea66453d19defccf</guid><dc:creator>James Ford</dc:creator><pubDate>Mon, 25 Sep 2017 21:11:30 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1504730668753-bea25cfb2d0e?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;s=5df5ffb704f9dc081bdeea3aa5ba341b" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="https://images.unsplash.com/photo-1504730668753-bea25cfb2d0e?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;s=5df5ffb704f9dc081bdeea3aa5ba341b" alt="A collection of free, online, Front End Web Development books."&gt;&lt;p&gt;A remarkable number of excellent books about Front End Web Development are freely available online, if you know where to look. Here's a collection of those that I've discovered, and deigned to keep in my bookmarks.&lt;/p&gt;
&lt;h2 id="eloquentjavascript"&gt;Eloquent JavaScript:&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://eloquentjavascript.net/"&gt;http://eloquentjavascript.net/&lt;/a&gt;&lt;br&gt;
&lt;a href="http://eloquentjavascript.net/"&gt;&lt;img src="http://localhost:2368/content/images/2017/09/eloquent-javascript.png" alt="A collection of free, online, Front End Web Development books."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="learningjavascriptdesignpatterns"&gt;Learning JavaScript Design Patterns:&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/"&gt;https://addyosmani.com/resources/essentialjsdesignpatterns/book/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/"&gt;&lt;img src="http://localhost:2368/content/images/2017/09/ljsdp.jpg" alt="A collection of free, online, Front End Web Development books."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="highperformancewebsites"&gt;High Performance Web Sites:&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://stevesouders.com/hpws/"&gt;http://stevesouders.com/hpws/&lt;/a&gt;&lt;br&gt;
&lt;a href="http://stevesouders.com/hpws/"&gt;&lt;img src="http://localhost:2368/content/images/2017/09/hpws.jpg" alt="A collection of free, online, Front End Web Development books."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="highperformancebrowsernetworking"&gt;High Performance Browser Networking:&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://hpbn.co/"&gt;https://hpbn.co/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://hpbn.co/"&gt;&lt;img src="http://localhost:2368/content/images/2017/09/hpbn.jpg" alt="A collection of free, online, Front End Web Development books."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="designingforperformance"&gt;Designing for Performance:&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://designingforperformance.com/"&gt;http://designingforperformance.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="http://designingforperformance.com/"&gt;&lt;img src="http://localhost:2368/content/images/2017/09/dfp.jpg" alt="A collection of free, online, Front End Web Development books."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>My Front End Web Development setup, with Visual Studio Code.</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;&lt;strong&gt;Background:&lt;/strong&gt; I've been using Visual Studio Code for about half a year now, after giving it a try at the insistence of other developers at the office. Prior to this I used Jetbrains WebStorm and PHPStorm.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The verdict:&lt;/strong&gt; My experience so far has been extremely positive - out of the&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/my-visual-studio-code-setup/</link><guid isPermaLink="false">59c77339ea66453d19defcc0</guid><category>Development</category><category>Visual Studio Code</category><dc:creator>James Ford</dc:creator><pubDate>Sun, 24 Sep 2017 18:51:19 GMT</pubDate><media:content url="https://images.unsplash.com/photo-1478358161113-b0e11994a36b?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;s=545bb25856598ef66864e9b875a15581" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="https://images.unsplash.com/photo-1478358161113-b0e11994a36b?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1080&amp;fit=max&amp;s=545bb25856598ef66864e9b875a15581" alt="My Front End Web Development setup, with Visual Studio Code."&gt;&lt;p&gt;&lt;strong&gt;Background:&lt;/strong&gt; I've been using Visual Studio Code for about half a year now, after giving it a try at the insistence of other developers at the office. Prior to this I used Jetbrains WebStorm and PHPStorm.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The verdict:&lt;/strong&gt; My experience so far has been extremely positive - out of the box VS Code is pretty capable, and with the correct mix of plugins it can match almost any other IDE I've otherwise used, but with a much smaller memory footprint and faster startup time.&lt;/p&gt;
&lt;p&gt;The plugins that I use for Visual Studio Code are:&lt;/p&gt;
&lt;h3 id="functionalplugins"&gt;Functional plugins&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Auto Rename Tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;ESLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;Git Lens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=chenxsan.vscode-standardjs"&gt;JavaScript Standard Style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=robinbentley.sass-indented"&gt;Sass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eg2.tslint"&gt;TSLint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="languageframeworkspecificplugins"&gt;Language / Framework specific plugins&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=PeterJausovec.vscode-docker"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur"&gt;Vetur&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=jcbuisson.vue"&gt;vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=peakchen90.vue-beautify"&gt;vue-beautify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;In conclusion:&lt;/strong&gt; Out of the box, WebStorm is awesome. But plugins are a core part of Visual Studio Code, and the correct mix of plugins can bring it at least on par, feature-by-feature, with the competition.&lt;/p&gt;
&lt;p&gt;Comparing WebStorm and Visual Studio Code against each other, the only thing I've found to really distinguish them is that WebStorm has a more capable set of code refactoring and searching tools. Other than that, there's nothing that I use day-to-day that's missing.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Uploading files to Trello with Node.js</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;&lt;a href="https://trello.com/"&gt;Trello&lt;/a&gt; is one of my favourite low-budget Content Management Systems for bootstrapped projects (that is to say, projects with zero budget and not projects which use the bootstrap css framework.)&lt;/p&gt;
&lt;p&gt;One of the more recent things I've had to do is upload files from my local machine and store them&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/uploading-files-to-trello-with-node-js/</link><guid isPermaLink="false">59ac728187d02b43f8a8e7f9</guid><category>Node.js</category><category>Trello</category><dc:creator>James Ford</dc:creator><pubDate>Thu, 18 May 2017 20:38:43 GMT</pubDate><media:content url="http://localhost:2368/content/images/2017/05/Optimized-sanwal-deen-93466.jpg" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="http://localhost:2368/content/images/2017/05/Optimized-sanwal-deen-93466.jpg" alt="Uploading files to Trello with Node.js"&gt;&lt;p&gt;&lt;a href="https://trello.com/"&gt;Trello&lt;/a&gt; is one of my favourite low-budget Content Management Systems for bootstrapped projects (that is to say, projects with zero budget and not projects which use the bootstrap css framework.)&lt;/p&gt;
&lt;p&gt;One of the more recent things I've had to do is upload files from my local machine and store them against a card in Trello. To achieve this I'm using Node.js and the &lt;a href="https://github.com/adunkman/node-trello"&gt;node-trello&lt;/a&gt; module, with the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const fs = require('fs')
const path = require('path')
const Trello = require('node-trello')
const t = new Trello(trelloAuthKey, trelloAuthToken)

t.post(`/1/cards/${cardId}/attachments`, { attachment: fs.createReadStream(path.resolve(__dirname, 'path/to/file.doc')) }, function (err, attachments) {
  if (err) throw err;
  console.log(attachments);
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the process of uploading files with this module is really simple. All you need to know is your Trello API credentials, the Id of the target card, and the path to the file to be uploaded on the local machine.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Generating images for download with HTML5 and Canvas</title><description>&lt;div class="kg-card-markdown"&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;p&gt;With a clever bit of trickery from HTML5 and JavaScript, it is possible to trigger a browser download of anything that can be generated in a canvas element, regardless of whether that element is visible or not. This works in modern &lt;a href="https://caniuse.com/#feat=download"&gt;browsers which support the 'download' attribute&lt;/a&gt; and &lt;a href="https://caniuse.com/#feat=canvas"&gt;which&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/generating-images-for-download-with-html5-and-canvas/</link><guid isPermaLink="false">59ac728187d02b43f8a8e806</guid><category>Canvas</category><category>HTML5</category><category>JavaScript</category><dc:creator>James Ford</dc:creator><pubDate>Mon, 01 May 2017 08:57:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2017/04/neven-krcmarek-145603.jpg" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;
&lt;img src="http://localhost:2368/content/images/2017/04/neven-krcmarek-145603.jpg" alt="Generating images for download with HTML5 and Canvas"&gt;&lt;p&gt;With a clever bit of trickery from HTML5 and JavaScript, it is possible to trigger a browser download of anything that can be generated in a canvas element, regardless of whether that element is visible or not. This works in modern &lt;a href="https://caniuse.com/#feat=download"&gt;browsers which support the 'download' attribute&lt;/a&gt; and &lt;a href="https://caniuse.com/#feat=canvas"&gt;which support the 'canvas' element.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In most browsers a canvas image can already be natively saved through the right-click menu, and what this technique is doing is essentially automating, or forcing, this action on the users' behalf. One of the advantages with this technique - besides the improved user experience - is that you have a chance to cleanly re-render the canvas element and essentially modify the output before the browser begins saving the image.&lt;/p&gt;
&lt;p&gt;This means you can adjust the resolution, the aspect ratio, add watermarks or even modify the image data before it's downloaded by the user. Of course, the original right-click menu and functionality still exists, so you can't use this as a method of stopping users from saving your images completely, but it does mean that you can give them a better experience using your website.&lt;/p&gt;
&lt;h2 id="realworldexample"&gt;Real-world example&lt;/h2&gt;
&lt;p&gt;I've used this technique on &lt;a href="https://www.pokeproject.co.uk/"&gt;PokéProject&lt;/a&gt;, with what I call the &lt;a href="https://www.pokeproject.co.uk/instagram/"&gt;'Highresinator'.&lt;/a&gt; PokéProject takes the pixel art from the original Pokémon GameBoy games, and scales it up from the original 32x32 pixel images into wallpaper backgrounds for desktop computers or mobile devices.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.pokeproject.co.uk/instagram/gengar"&gt;&lt;img src="http://localhost:2368/content/images/2017/04/pokeproject.png" alt="Generating images for download with HTML5 and Canvas"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As you can see in the image above, as part of this process I'm generating a canvas-based preview of the wallpaper image, but that preview canvas isn't the correct resolution for any downloads. To fix this I've added a short form with download buttons, and clicking any of those buttons will generate the artwork shown on the canvas at the specified resolution.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/04/downloadpokeproject.gif" alt="Generating images for download with HTML5 and Canvas"&gt;&lt;/p&gt;
&lt;h2 id="examplecode"&gt;Example code&lt;/h2&gt;
&lt;p&gt;The key steps to this process are simple. First you have to generate an off-screen canvas element, into which you draw your image, and then you create an anchor element with a download attribute, transfer the users' click event to this element, and a download will be triggered.&lt;/p&gt;
&lt;p&gt;Let's look at some sample code.&lt;/p&gt;
&lt;p&gt;First, we're going to need a simple website which contains a canvas element:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;title&amp;gt;Canvas Downloads&amp;lt;/title&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;
		&amp;lt;canvas id=&amp;quot;myCanvas&amp;quot; width=&amp;quot;100&amp;quot; height=&amp;quot;100&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;
		&amp;lt;a id=&amp;quot;downloadLink&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;Download Canvas&amp;lt;/a&amp;gt;
	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we use JavaScript to render something simple on the canvas - a bright red box, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
	var canvasElement = document.getElementById('myCanvas')
	var drawingContext = canvasElement.getContext('2d')
	drawingContext.fillStyle = '#ff0000'
	drawingContext.fillRect(10, 10, 80, 80)
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/04/preview.png" alt="Generating images for download with HTML5 and Canvas"&gt;&lt;/p&gt;
&lt;p&gt;That works, but it's not very reusable - so let's refactor it a little:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
	function renderCanvas(canvasElement) {
		var drawingContext = canvasElement.getContext('2d')
		drawingContext.fillStyle = '#ff0000'
		drawingContext.fillRect(10, 10, 80, 80)
	}
	var canvasElement = document.getElementById('myCanvas')
	renderCanvas(canvasElement)
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's a bit more reusable - we're still doing the same actions, but we've made the canvas element that we draw to reusable.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/04/rightclickpreview.png" alt="Generating images for download with HTML5 and Canvas"&gt;&lt;/p&gt;
&lt;p&gt;Our users can currently right click on the canvas element and save it locally. Let's add a button which will perform this action for them automatically.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
	function renderCanvas(canvasElement) {
		var drawingContext = canvasElement.getContext('2d')
		drawingContext.fillStyle = '#ff0000'
		drawingContext.fillRect(10, 10, 80, 80)
	}
	var canvasElement = document.getElementById('myCanvas')
	renderCanvas(canvasElement)

	var linkElement = document.getElementById('downloadLink')
	linkElement.addEventListener('click', function() {
		var newCanvas = document.createElement('canvas')
		newCanvas.width = 100
		newCanvas.height = 100

		renderCanvas(newCanvas)

		let fakeDownloadElement = document.createElement('a')
	    document.body.appendChild(fakeDownloadElement)
	    fakeDownloadElement.setAttribute('href', newCanvas.toDataURL('image/png', 1.0))
	    fakeDownloadElement.setAttribute('download', 'red-square.png')
	    fakeDownloadElement.style.display = ''

	    fakeDownloadElement.click()

	    document.body.removeChild(element)
	})
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's a lot of new code, but there's a few simple steps to this process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We create a new canvas DOM element, which is not added to the main page DOM and therefore is not visible.&lt;/li&gt;
&lt;li&gt;We re-use our original canvas drawing logic, to draw a red box into our new (invisible) canvas element&lt;/li&gt;
&lt;li&gt;We create a hyperlink element in the page DOM, set the element URL to be an bytedata representation of the canvas element (in png format as well, for transparency)&lt;/li&gt;
&lt;li&gt;We set the 'download' attribute on the new element, specifying the download filename &lt;em&gt;and&lt;/em&gt; changing the default browser behaviour and have it download the data as a file rather than trying to navigate to an URL&lt;/li&gt;
&lt;li&gt;We fake a click event on our new hyperlink element, to trigger the file save&lt;/li&gt;
&lt;li&gt;We remove the link element from the DOM and clean up afterwards&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/04/canvaspreview-2.gif" alt="Generating images for download with HTML5 and Canvas"&gt;&lt;/p&gt;
&lt;p&gt;This code is currently just saving exactly what's in the canvas. Let's make things a little more interesting - we're going to change the size of the download and the colour of the box.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
	function renderCanvas(canvasElement, colour) {
		var drawingContext = canvasElement.getContext('2d')
		drawingContext.fillStyle = colour
		drawingContext.fillRect(10, 10, canvasElement.width - 20, canvasElement.height - 20)
	}
	var canvasElement = document.getElementById('myCanvas')
	renderCanvas(canvasElement, '#ff0000')

	var linkElement = document.getElementById('downloadLink')
	linkElement.addEventListener('click', function() {
		var newCanvas = document.createElement('canvas')
		newCanvas.width = 320
		newCanvas.height = 240

		renderCanvas(newCanvas, '#00ff00')

		let fakeDownloadElement = document.createElement('a')
	    document.body.appendChild(fakeDownloadElement)
	    fakeDownloadElement.setAttribute('href', newCanvas.toDataURL('image/png', 1.0))
	    fakeDownloadElement.setAttribute('download', 'green-rectangle.png')
	    fakeDownloadElement.style.display = ''

	    fakeDownloadElement.click()

	    document.body.removeChild(element)
	})
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we've done here is change the render function slightly, so that it takes a colour parameter to the render function, and we've changed the box drawing logic, so that it draws a rectangle inside the edges of the canvas, regardless of the canvas size.&lt;/p&gt;
&lt;p&gt;A user will now see a preview of a red box, but if they click on the download link, they'll get a green rectangle downloaded instead. They could still click on the original canvas and save that of course, but that's not the point of this exercise, and there are other ways of preventing that behaviour.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/04/canvaspreview.gif" alt="Generating images for download with HTML5 and Canvas"&gt;&lt;/p&gt;
&lt;p&gt;We've achieved all of this on the client-side - no server-based image generation at all. This is the logic which underpins the wallpaper downloads of PokéProject &lt;a href="https://www.pokeproject.co.uk/"&gt;[link]&lt;/a&gt;, which has a number of pre-set image download links at fixed and custom resolutions.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codepen.io/psyked/pen/WjpaMQ"&gt;You can see a working example on CodePen.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>How to effectively kill your Agile Team</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Agile methodology is the glorious present and future of software development, but the correct set of circumstances can seriously cripple a team's morale and their effectiveness.&lt;/p&gt;
&lt;h2 id="introduceahierarchy"&gt;Introduce a hierarchy&lt;/h2&gt;
&lt;p&gt;Such an innocuous thing, right? Surely a hierarchy would clarify matters - make the chain of command easier to understand for&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/how-to-effectively-kill-your-agile-team/</link><guid isPermaLink="false">59ac728187d02b43f8a8e804</guid><category>Agile Software Development</category><dc:creator>James Ford</dc:creator><pubDate>Wed, 26 Apr 2017 08:03:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2017/04/giphy.gif" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="http://localhost:2368/content/images/2017/04/giphy.gif" alt="How to effectively kill your Agile Team"&gt;&lt;p&gt;Agile methodology is the glorious present and future of software development, but the correct set of circumstances can seriously cripple a team's morale and their effectiveness.&lt;/p&gt;
&lt;h2 id="introduceahierarchy"&gt;Introduce a hierarchy&lt;/h2&gt;
&lt;p&gt;Such an innocuous thing, right? Surely a hierarchy would clarify matters - make the chain of command easier to understand for everyone involved. Besides, the team needs a leader, someone to take control and guide the technical development, to tell the others what to do and when, and the team needs someone to turn to for instructions whenever they finish a task.&lt;/p&gt;
&lt;p&gt;This is especially effective at reducing developer morale - they don't have much independence as it is, so taking the perceived freedom offered by an Agile development team and channelling through a specific person is an excellent buzz kill.&lt;/p&gt;
&lt;h2 id="ignoretherituals"&gt;Ignore the rituals&lt;/h2&gt;
&lt;p&gt;Agile development encourages a lot of ritualised meetings - standups, demos, retrospectives, etcetera. They have specific purposes and agendas, they tease out different information from the team, they course-correct the development process.&lt;/p&gt;
&lt;p&gt;You can start by eroding the team's perception of the importance of those rituals. Skip a meeting. Cancel one at the last minute. Go off-topic, and encourage others to do the same. Mash meetings together, dilute their purpose and soon enough people will be sitting around wondering why this Agile thing isn't delivering on its promises.&lt;/p&gt;
&lt;h2 id="throttletheteamresource"&gt;Throttle the team resource&lt;/h2&gt;
&lt;p&gt;The team can't give 100% if you split the members across too many projects, or if their availability is erratic or unpredictable by other means.&lt;/p&gt;
&lt;p&gt;The maximum rate of development is as fast as the developers can work, but when the rest of the project team - be they product owner, designer, scrum master, infrastructure, DevOps or QA - are unavailable it impacts on the speed with which they finish user stories and the efficiency of their work.&lt;/p&gt;
&lt;p&gt;Subtract enough of the team's resource on other things and you're littering their path with potential blockers. Enough of those blockers can bring development to a standstill, or at least burn through all of the budget by way of inefficiency.&lt;/p&gt;
&lt;h2 id="dontlistentotheircomplaints"&gt;Don't listen to their complaints&lt;/h2&gt;
&lt;p&gt;If that's not enough on its own, try disconnecting from the team as much as possible. Assume they'll work those issues out on their own.&lt;/p&gt;
&lt;p&gt;They won't, of course - if you've followed the steps outlined here then you've already robbed them of their power, and it's merely a race against time to see whether the team is stubborn enough to hold it together long enough to get the project over the finish line, or implodes before that point.&lt;/p&gt;
&lt;p&gt;/s&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>PokéProject: from Static HTML, to React, to Nuxt.</title><description>&lt;div class="kg-card-markdown"&gt;&lt;h4 id="preface"&gt;Preface:&lt;/h4&gt;
&lt;p&gt;This is the story of my development journey with &lt;a href="https://www.pokeproject.co.uk/"&gt;PokéProject.&lt;/a&gt; Hopefully this isn't the complete story, and there's much more to be told again in the future. This isn't a tale of the perfect development lifecycle, and I'm sure that if I started this project from scratch again a&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/from-static-html-to-react-to-nuxt/</link><guid isPermaLink="false">59ac728187d02b43f8a8e801</guid><category>Web development</category><category>PokéProject</category><category>Nuxt</category><category>React</category><dc:creator>James Ford</dc:creator><pubDate>Mon, 10 Apr 2017 08:11:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2017/04/ivysaur.png" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;h4 id="preface"&gt;Preface:&lt;/h4&gt;
&lt;img src="http://localhost:2368/content/images/2017/04/ivysaur.png" alt="PokéProject: from Static HTML, to React, to Nuxt."&gt;&lt;p&gt;This is the story of my development journey with &lt;a href="https://www.pokeproject.co.uk/"&gt;PokéProject.&lt;/a&gt; Hopefully this isn't the complete story, and there's much more to be told again in the future. This isn't a tale of the perfect development lifecycle, and I'm sure that if I started this project from scratch again a fair number of alternate choices would have been made.&lt;/p&gt;
&lt;p&gt;Ready? &lt;em&gt;Let's get going.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="theidea"&gt;The idea 💡✨&lt;/h3&gt;
&lt;p&gt;The initial idea for PokéProject was to use the classic Pokémon games of my childhood as inspiration for codenames in my projects at work, as a sort of nostalgic injection of fun into the daily grind.&lt;/p&gt;
&lt;p&gt;Project codenames are a fairly big thing at &lt;a href="https://www.mmtdigital.co.uk/"&gt;MMT Digital&lt;/a&gt; - each project team picks a codename for themselves as a bonding exercise during the first sprint - and often go so far as to support that with limited-edition swag, such as branded mugs, t-shirts or similar items. One of these project kick-off meetings sparked the idea for me, and it took shape from then on.&lt;/p&gt;
&lt;h3 id="thetechnicalapproach"&gt;The technical approach 🤔&lt;/h3&gt;
&lt;p&gt;I am primarily a Front End Developer, and my language of choice is JavaScript. For the very first version of PokéProject I figured that all I needed would be static HTML, CSS and some plain vanilla JavaScript. No frameworks, no Bootstrap templates, and certainly nothing to distract me from the core purpose of the project, which was to generate codenames.&lt;/p&gt;
&lt;h3 id="theprogressplateau"&gt;The progress plateau 📉&lt;/h3&gt;
&lt;p&gt;This lean, framework-free approach served me well at the start, and even afforded me time enough to code and blog about my code, but eventually I stopped making enough progress each time to make documenting the journey on such a regular basis seem worthwhile. I managed 8 posts in total before I got to this point.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@psyked/pok%C3%A9project-dev-diary-prologue-d214a44c348f"&gt;PokéProject Dev Diary: Prologue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@psyked/pok%C3%A9project-dev-diary-day-one-8a77a252bf0a"&gt;PokéProject Dev Diary: Day One&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@psyked/pokeproject-dev-diary-day-two-a6019e6cf0f0"&gt;PokéProject Dev Diary: Day Two&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@psyked/pok%C3%A9project-dev-diary-day-three-31afdf3e1302"&gt;PokéProject Dev Diary: Day Three&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@psyked/pok%C3%A9project-dev-diary-day-four-25aed272eb17"&gt;PokéProject Dev Diary: Day Four&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@psyked/pok%C3%A9project-dev-diary-day-five-92859457a20a"&gt;PokéProject Dev Diary: Day Five&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@psyked/pok%C3%A9project-dev-diary-day-six-c263ef30fd0c"&gt;PokéProject Dev Diary: Day Six&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@psyked/pok%C3%A9project-dev-diary-day-seven-dc096bdac274"&gt;PokéProject Dev Diary: Day Seven&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After this initial phase, having something substantial enough to write about in what was essentially a few hours' development each day was becoming too much hassle, and I stopped writing about it, even as development continued.&lt;/p&gt;
&lt;h2 id="theneedtorebuild"&gt;The need to rebuild&lt;/h2&gt;
&lt;p&gt;This was essentially the first phase of development - getting a prototype application up and running, and out in the wild. Phase two is when we take the idea further, and begin a large scale redevelopment to enable bigger and better things.&lt;/p&gt;
&lt;p&gt;When I say bigger and better things, I'm talking about a few key features that I felt were lacking with PokéProject, and were limiting its chances of success. These were primarily:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Social Networking integration.&lt;/li&gt;
&lt;li&gt;The maintainability and long-term scalability of the source code.&lt;/li&gt;
&lt;li&gt;The limitations of my URL routing solution and the difficulty of deploying and maintaining it.&lt;/li&gt;
&lt;li&gt;The download size of the website and its data sources.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having focussed more on the prototype and shunning unfamiliar frameworks, it was becoming increasingly apparent that I was spending much more time developing solutions that others had already solved, rather than developing my own unique application features.&lt;/p&gt;
&lt;p&gt;![]&lt;/p&gt;
&lt;h2 id="statichtml"&gt;Static HTML&lt;/h2&gt;
&lt;p&gt;Static HTML is ultimately faster than anything that's dynamically generated on the server side is going to be. The development server for PokéProject uses NGINX to serve static HTML, and it's fast and scalable. Prior experience tells me that there's going to be no problems with load or resource consumption - if we get enough traffic to cause issues, it's not going to be NGINX which fails first.&lt;/p&gt;
&lt;p&gt;The setup that I went for was very low budget - my entire 'website' was a single index.html file which NGINX was configured to serve by default when a directly referenced file didn't exist on the server. Regardless of the URL requested, the same index.html file contents would be returned and, the client-side JavaScript would evaluate the window.location property to determine what content to display on screen. A low budget, entirely custom approach to URL routing - simple, but it works. Or worked, initially.&lt;/p&gt;
&lt;h3 id="problemswithstatichtml"&gt;Problems with Static HTML&lt;/h3&gt;
&lt;p&gt;The problems with static HTML really started to emerge when I wanted to push PokéProject into the social sphere, and make the content more easily sharable on platforms like Twitter and Facebook. When adding links to these platforms they make a request to fetch data about the linked page, and use that to populate a preview of the link. The trouble is my static HTML pages are essentially all the same HTML file, served in response to any URL request and the contents evaluated and rendered client-side based on the content, which is far from ideal for these server-based website previews. I really needed different, appropriate HTML to be served for each URL request - essentially, I needed server-side rendering.&lt;/p&gt;
&lt;h4 id="option1morestatichtml"&gt;Option 1: More Static HTML&lt;/h4&gt;
&lt;p&gt;One option that was open to me was the idea of pre-rendering my static HTML, building a one-off task to autogenerate a whole load of HTML files with different contents.&lt;/p&gt;
&lt;p&gt;To a certain extent I was already doing something similar - for the first version of the Twitter card integration I needed to create actual JPG format versions of my canvas rendering, so I built a script to do a one-off generation of  the 721 Pokémon cards needed to support it - but generating potentially thousands of copies static HTML files in the appropriate URL structures didn't seem the proper way, not least because the time it takes to update these on the server for each release was prohibitive.&lt;/p&gt;
&lt;h4 id="option2serversiderendering"&gt;Option 2: Server Side Rendering&lt;/h4&gt;
&lt;p&gt;Another alternate option, and the one I actually took, was to investigate further the idea of building PokéProject in a proper framework, ideally one with server-side or 'universal' rendering support.&lt;/p&gt;
&lt;p&gt;Part of my decision making here was based on the fact that I &lt;em&gt;wanted&lt;/em&gt; to use a framework. It's not generally a sensible business decision to gamble on something you don't understand when there's a perfectly viable alternative available, but I did it anyway, mainly because I hadn't used React before, and I wanted to change that.&lt;/p&gt;
&lt;h2 id="adoptingreact"&gt;✨Adopting React✨&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://facebook.github.io/react/"&gt;React&lt;/a&gt; is a component-based view rendering library, and the theory and thinking that's gone into its conception makes it a really attractive library to be using.&lt;/p&gt;
&lt;p&gt;Once I had started it was really easy to transform my bespoke, standalone JavaScript code into React components, and once I had those it was startlingly easy to use, re-use and mash those components together to begin exploring a host of new directions for my application.&lt;/p&gt;
&lt;h3 id="problemswithreact"&gt;Problems with React&lt;/h3&gt;
&lt;p&gt;The problem was, my out-of-the-box React application didn't support server-side rendering, which was kinda the main point of adopting it in the first place.&lt;/p&gt;
&lt;p&gt;React is very popular, and as a result there are loads of starter tutorials and bootstrap projects available. And I do mean loads. There's even &lt;a href="http://localhost:2368/from-static-html-to-react-to-nuxt/"&gt;a website dedicated to helping you find one with the features that you need.&lt;/a&gt; I picked the first one I found that I found accessible, and ended up without the universal rendering support that I really needed from it in the first place.&lt;/p&gt;
&lt;p&gt;No problem, I thought, and picked another. Most of the structure was the same, and I spent an evening porting the code across, only to discover that 'this' template uses React &lt;em&gt;and&lt;/em&gt; Redux. &lt;a href="http://redux.js.org/"&gt;Redux&lt;/a&gt; is a whole other deal - they even advise against taking on the two for the first time at the same time specifically on their website. Jump forward in time and wasted a few more days trying to figure out how &lt;em&gt;that&lt;/em&gt; works, and I still don't have a React app with server-side rendered content, and so I'm back to desperately researching React starter templates for one that's a) easy enough for me to understand without lots of reading documentation and b) supports server side rendering, hot module reloading and everything else I think a project should have.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/04/soconfusing.gif" alt="PokéProject: from Static HTML, to React, to Nuxt."&gt;&lt;/p&gt;
&lt;p&gt;By this point, I've spent almost as much time trying to understand React and getting a template which just &lt;em&gt;works&lt;/em&gt; that I spent developing the core of the application. I want to work on my application functionality, not the boring things like configuration and customisation - that's the whole point of adopting a framework, abstracting away the dull, mundane bits of development.&lt;/p&gt;
&lt;h3 id="admittingdefeat"&gt;Admitting defeat&lt;/h3&gt;
&lt;p&gt;I tried React because it offered to componentise my source code, give me a solid URL routing library, make me organise my source code better and offer server side rendering, but all I really ended up doing was realising 'React' as I understood it was more an umbrella term for a whole host of libraries, not one of which seemed to be intuitive enough for me to understand.&lt;/p&gt;
&lt;h2 id="findingvuejs"&gt;Finding Vue.js&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://vuejs.org/"&gt;Vue.js,&lt;/a&gt; had been a technology in my peripheral vision for a little while, and I started really looking at it again after my failures with React. It's perhaps wrong to like a technology purely based on the branding of its website, but it has got that going for it as well. I don't start with the documentation when looking at a technology, I start with the code examples, and I was quickly redirected to the Nuxt project because it advertised server-side rendering.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/04/nuxt.png" alt="PokéProject: from Static HTML, to React, to Nuxt."&gt;&lt;/p&gt;
&lt;h2 id="adoptingnuxt"&gt;✨Adopting Nuxt✨&lt;/h2&gt;
&lt;p&gt;My experience with &lt;a href="https://nuxtjs.org/"&gt;Nuxt&lt;/a&gt; has been significantly better than that with React. Right from the start the example applications available on &lt;a href="https://github.com/nuxt"&gt;GitHub&lt;/a&gt; have 'just worked', and have been simple enough for me to muddle through without further reading and still offer all of the features I needed. Somehow, it's more intuitive than React ever was.&lt;/p&gt;
&lt;p&gt;Quite literally, I was able to find, download, install and have a working local development and production server working as a proof of concept with an Express-based API, webpack code-splitting, hot module reloading and everything else in under an hour. Given that I couldn't achieve the equivalent thing in &lt;em&gt;two weeks&lt;/em&gt; of development with React, I was hooked on Nuxt fairly quickly.&lt;/p&gt;
&lt;p&gt;Perhaps it's because the community is much smaller, or perhaps Nuxt is ultimately less flexible than React, but it does seem that there's one way, and one way only to solve a problem - and I'm happy with that. Nuxt has an example for every feature I've needed, and I don't feel the need to challenge the approach or the architecture, because it works. It does seems to hide more of the technical details of the website away from me, and autogenerates core parts of the application, but that hasn't been a problem - it means I can focus more on my application, and making my unique stuff work, and forget about everything else.&lt;/p&gt;
&lt;p&gt;Since then, I've completely replaced &lt;a href="https://www.pokeproject.co.uk/"&gt;PokéProject&lt;/a&gt; with a Nuxt based version, and I'm excited for what the future has in store.&lt;/p&gt;
&lt;p&gt;![]&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>The history of the humble gif</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;I'm a fan of &lt;a href="https://en.wikipedia.org/wiki/GIF"&gt;gif images&lt;/a&gt; as a method of communication - &lt;em&gt;particularly&lt;/em&gt; in our company Slack channel - and I love to learn a little more about the technology and development of various key aspects of the web, so I found the article &lt;a href="http://www.popularmechanics.com/technology/a21457/the-gif-is-dead-long-live-the-gif/"&gt;&amp;quot;The gif is dead, long&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/the-history-of-the-humble-gif/</link><guid isPermaLink="false">59ac728187d02b43f8a8e7f5</guid><category>External links</category><category>gif</category><dc:creator>James Ford</dc:creator><pubDate>Wed, 22 Feb 2017 08:40:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2017/02/jan-kahanek-184676.jpg" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="http://localhost:2368/content/images/2017/02/jan-kahanek-184676.jpg" alt="The history of the humble gif"&gt;&lt;p&gt;I'm a fan of &lt;a href="https://en.wikipedia.org/wiki/GIF"&gt;gif images&lt;/a&gt; as a method of communication - &lt;em&gt;particularly&lt;/em&gt; in our company Slack channel - and I love to learn a little more about the technology and development of various key aspects of the web, so I found the article &lt;a href="http://www.popularmechanics.com/technology/a21457/the-gif-is-dead-long-live-the-gif/"&gt;&amp;quot;The gif is dead, long live the gif.&amp;quot;&lt;/a&gt; a fascinating read.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.popularmechanics.com/technology/a21457/the-gif-is-dead-long-live-the-gif/"&gt;&lt;img src="http://localhost:2368/content/images/2017/02/Screen-Shot-2017-02-22-at-07.48.21.png" alt="The history of the humble gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Overcoming writer’s block</title><description>Writing isn't an easy thing. All of the movies, television, books, documents, books and blogs that you watch, read or otherwise consume make it seem like such a trivial task but it's really not.</description><link>http://localhost:2368/overcoming-writers-block/</link><guid isPermaLink="false">59ac728187d02b43f8a8e7ec</guid><category>Blogging</category><category>Writing</category><dc:creator>James Ford</dc:creator><pubDate>Sun, 19 Feb 2017 20:05:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2017/02/amador-loureiro-779.jpg" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="http://localhost:2368/content/images/2017/02/amador-loureiro-779.jpg" alt="Overcoming writer’s block"&gt;&lt;p&gt;I like writing. That's not always been the case - it certainly wasn't my forte back when I needed it at school and with my University dissertation (as my wife will testify) but it's something I've picked up since then. Because I like writing I try to encourage others - especially those that I work with - to write more, and more often. This post is for those people.&lt;/p&gt;
&lt;h2 id="theproblemswithwriting"&gt;The problems with writing.&lt;/h2&gt;
&lt;p&gt;Writing isn't an easy thing. All of the movies, television shows, documents, books and blogs that you watch, read or otherwise consume make it seem like such a trivial task but it's really not.&lt;/p&gt;
&lt;p&gt;In reality it's tough to find your voice. Not only that, it's difficult to get started, it's hard to draw your work to a conclusion, it's demoralizing to run out of ideas half-way through a piece, and it's paralyzing to get stuck in an endless spiral of proofreading and tweaking.&lt;/p&gt;
&lt;h2 id="thereasonsforwriting"&gt;The reasons for writing.&lt;/h2&gt;
&lt;p&gt;The ultimate test of your knowledge about a subject is in being able to explain it in your own words. Writing is one of the best media to hone your explanations. It's a monologue, but an editable one, and when you've finally finished you have a singular distillation of your arguments - a tangible outcome from your efforts.&lt;/p&gt;
&lt;p&gt;Conversing with someone else, teaching and training them are also great ways of securing your knowledge, but the drawbacks are that the outcomes are transitory and more difficult to replicate. It &lt;em&gt;is&lt;/em&gt; a better way to impart your knowledge, but it's not a replicable, scalable, easily-sharable way of passing on whatever you want to share.&lt;/p&gt;
&lt;p&gt;And from a purely promotional point of view, if you're looking to market yourself or your company, you'll soon learn that &lt;em&gt;&amp;quot;original content feeds the social media monster.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/01/desktop-1421165802.jpg" alt="Overcoming writer’s block"&gt;&lt;/p&gt;
&lt;p&gt;Unless you're ashamed of what you've written (in which case, don't publish it) there is no downside to writing your thoughts and publishing. The world needs original content, and it needs many voices. &lt;strong&gt;Write.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Hallmarks of a Modern development workflow - Continuous Integration &amp; Deployment</title><description>&lt;div class="kg-card-markdown"&gt;&lt;blockquote&gt;
&lt;p&gt;Software Development is a creative process, and as such it's important to minimise the things which can disrupt your flow.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="cicd"&gt;CI/CD&lt;/h2&gt;
&lt;p&gt;A modern web development setup is one that harnesses the concepts of &lt;a href="https://www.thoughtworks.com/continuous-integration"&gt;Continuous Integration&lt;/a&gt; and &lt;a href="https://www.agilealliance.org/glossary/continuous-deployment/"&gt;Continuous Deployment&lt;/a&gt; to deliver the end result. Practically implementing these two concepts goes&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/a-modern-development-workflow-ci-and-cd/</link><guid isPermaLink="false">59ac728187d02b43f8a8e7f0</guid><category>Continuous Integration</category><category>Continuous Deployment</category><category>Web development</category><dc:creator>James Ford</dc:creator><pubDate>Mon, 30 Jan 2017 09:15:00 GMT</pubDate><media:content url="http://localhost:2368/content/images/2017/01/nyan_cat_1920x1200_wallpaper_A_2560x1600_animalhi.com.jpg" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;blockquote&gt;
&lt;img src="http://localhost:2368/content/images/2017/01/nyan_cat_1920x1200_wallpaper_A_2560x1600_animalhi.com.jpg" alt="Hallmarks of a Modern development workflow - Continuous Integration &amp; Deployment"&gt;&lt;p&gt;Software Development is a creative process, and as such it's important to minimise the things which can disrupt your flow.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="cicd"&gt;CI/CD&lt;/h2&gt;
&lt;p&gt;A modern web development setup is one that harnesses the concepts of &lt;a href="https://www.thoughtworks.com/continuous-integration"&gt;Continuous Integration&lt;/a&gt; and &lt;a href="https://www.agilealliance.org/glossary/continuous-deployment/"&gt;Continuous Deployment&lt;/a&gt; to deliver the end result. Practically implementing these two concepts goes a long way to improving the efficiency of a project. Why? Well, it's all about distractions.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/01/siliconvalley.gif" alt="Hallmarks of a Modern development workflow - Continuous Integration &amp; Deployment"&gt;&lt;/p&gt;
&lt;p&gt;Having an efficient, &amp;quot;hands-off&amp;quot; approach to validating and releasing code is an essential part of the way we work, primarily because it helps maintain our focus and avoids the need to context-switch.&lt;/p&gt;
&lt;p&gt;Before we had our fancy &lt;em&gt;Continuous Integration&lt;/em&gt; and &lt;em&gt;Continuous Deployment&lt;/em&gt; processes, we made manual deployments 😱. Back in those dark days, a human would log on to a server and copy files from  place-to-place. It required collaboration with the development team and concentration lest a mistake be made.&lt;/p&gt;
&lt;p&gt;With CI/CD, the whole development and deployment process works like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Work locally&lt;/li&gt;
&lt;li&gt;Test locally&lt;/li&gt;
&lt;li&gt;Commit code&lt;/li&gt;
&lt;li&gt;Push changes to Source Control&lt;/li&gt;
&lt;li&gt;Automated Tests&lt;/li&gt;
&lt;li&gt;Automated Deploy to Dev Environment&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which for a developer means:&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Code&lt;/li&gt;
&lt;li&gt;Push&lt;/li&gt;
&lt;li&gt;Next task&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Rather than:&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;Code&lt;/li&gt;
&lt;li&gt;Log on to server&lt;/li&gt;
&lt;li&gt;Copy files (wait...)&lt;/li&gt;
&lt;li&gt;Test&lt;/li&gt;
&lt;li&gt;Next task&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a much better setup because &lt;strong&gt;it greatly reduces the time spent not coding.&lt;/strong&gt; In terms of effort, deploying code and testing it afterwards is the most laborious part of the process. Both automating the testing and deployment of source code and initiating it automatically saves time, effort and cognitive overhead, leaving developers free to continue doing what they do best - development.&lt;/p&gt;
&lt;h2 id="usefullinks"&gt;Useful links&lt;/h2&gt;
&lt;p&gt;At &lt;a href="https://www.mmtdigital.co.uk/"&gt;MMT Digital&lt;/a&gt; we usually use &lt;a href="https://www.jetbrains.com/teamcity/"&gt;TeamCity&lt;/a&gt; to handle our CI/CD processes. I've also started looking at the newer pipeline features of &lt;a href="https://docs.gitlab.com/ee/ci/pipelines.html"&gt;GitLab&lt;/a&gt;, GitHub and &lt;a href="https://bitbucket.org/product/features/pipelines"&gt;Bitbucket&lt;/a&gt; on my personal projects as a way of achieving an automated CI/CD workflow.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Testing Performance, Speed and Best Practices with Lighthouse</title><description>&lt;div class="kg-card-markdown"&gt;&lt;blockquote&gt;
&lt;p&gt;Lighthouse is an open-source, automated tool for improving the quality of your web apps.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/01/mockup-screenshot.jpg" alt="Lighthouse screenshot"&gt;&lt;/p&gt;
&lt;p&gt;Web Development is an ever changing landscape, and as such we use a variety of tools to evaluate what we do. Like many others with a vested interest in the web, Google has its own projects,&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/testing-performance-speed-and-best-practices-with-lighthouse/</link><guid isPermaLink="false">59ac728187d02b43f8a8e7ef</guid><category>Performance</category><category>Testing</category><category>Progressive Web Apps</category><dc:creator>James Ford</dc:creator><pubDate>Sat, 28 Jan 2017 20:31:07 GMT</pubDate><media:content url="http://localhost:2368/content/images/2017/01/lighthouse.jpg" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;blockquote&gt;
&lt;img src="http://localhost:2368/content/images/2017/01/lighthouse.jpg" alt="Testing Performance, Speed and Best Practices with Lighthouse"&gt;&lt;p&gt;Lighthouse is an open-source, automated tool for improving the quality of your web apps.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/01/mockup-screenshot.jpg" alt="Testing Performance, Speed and Best Practices with Lighthouse"&gt;&lt;/p&gt;
&lt;p&gt;Web Development is an ever changing landscape, and as such we use a variety of tools to evaluate what we do. Like many others with a vested interest in the web, Google has its own projects, and &lt;a href="https://developers.google.com/web/tools/lighthouse/"&gt;Lighthouse&lt;/a&gt; is one of them.&lt;/p&gt;
&lt;p&gt;I find the Lighthouse tool &lt;em&gt;particularly&lt;/em&gt; interesting for two reasons - firstly because it looks at a few of the more recent specs like &lt;strong&gt;Progressive Web Apps&lt;/strong&gt; and the difficult-to-evaluate concepts like perceived speed, and secondly because it's developed by Google, which implies that it's looking at the kind of website optimisations that Google cares about when indexing a website.&lt;/p&gt;
&lt;h2 id="whatlighthousechecks"&gt;What Lighthouse checks&lt;/h2&gt;
&lt;p&gt;A few of the things that Lighthouse currently tests for are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Offline/flaky connection support&lt;/li&gt;
&lt;li&gt;Page load performance&lt;/li&gt;
&lt;li&gt;Progressive Enhancement&lt;/li&gt;
&lt;li&gt;Secure connection (HTTPS)&lt;/li&gt;
&lt;li&gt;Mobile-friendliness&lt;/li&gt;
&lt;li&gt;Page render speed / avoiding &amp;quot;jank&amp;quot;&lt;/li&gt;
&lt;li&gt;Modern accessibility tags&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="runninglighthouse"&gt;Running Lighthouse&lt;/h2&gt;
&lt;p&gt;There are two ways to run a set of Lighthouse tests. One method is through a Chrome Extension, which you can install through the &lt;a href="https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk"&gt;Chrome Web Store&lt;/a&gt; or as a Node module on &lt;a href="https://www.npmjs.com/package/lighthouse"&gt;NPM.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="usefullinks"&gt;Useful Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/tools/lighthouse/"&gt;The Lighthouse tool on Google Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk"&gt;Lighthouse on the Chrome Web Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/lighthouse"&gt;Lighthouse on NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://googlechrome.github.io/lighthouse/viewer/"&gt;Lighthouse report Viewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And if you're interested in an example report, take a look at &lt;a href="https://googlechrome.github.io/lighthouse/viewer/?gist=9573cb9302e15405026b40098c8fd342"&gt;the report for www.psyked.co.uk&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>